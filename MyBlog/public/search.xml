<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【香橙派5】RK3588s部署yolov5 - 训练部分</title>
      <link href="/2023/03/18/Orangepi-1/"/>
      <url>/2023/03/18/Orangepi-1/</url>
      
        <content type="html"><![CDATA[<h1 id="克隆yolov5仓库"><a href="#克隆yolov5仓库" class="headerlink" title="克隆yolov5仓库"></a>克隆yolov5仓库</h1><p>yolov5有很多个版本，这里我们采用官方修改过的yolov5进行训练，<a href="https://github.com/airockchip/yolov5">github仓库</a></p><p>根据官方介绍，此仓库有如下特性：</p><ul><li><p>基于 <a href="https://github.com/ultralytics/yolov5">https://github.com/ultralytics/yolov5</a> 代码修改，设配 rknpu 设备的部署优化</p></li><li><p>maxpool/ focus 优化，输出改为个branch分支的输出。以上优化代码使用插入宏实现，不影响原来的训练逻辑，这个优化兼容修改前的权重，故支持官方给的预训练权重。</p></li><li><p>修改激活函数 silu 为 relu</p></li><li><p>训练的相关内容请参考 README.md 说明</p></li><li><p>导出模型时 python export.py –rknpu {rk_platform} 即可导出优化模型<br>(rk_platform支持 rk1808, rv1109, rv1126, rk3399pro, rk3566, rk3568, rk3588, rv1103, rv1106)</p></li></ul><h1 id="准备数据集"><a href="#准备数据集" class="headerlink" title="准备数据集"></a>准备数据集</h1><p>如果只是为了适配rknn框架，可以忽略此步骤，使用官方的模型部署，<a href="https://github.com/ultralytics/yolov5/releases/download/v6.0/yolov5s.pt">官方模型链接</a></p><h2 id="数据集标注"><a href="#数据集标注" class="headerlink" title="数据集标注"></a>数据集标注</h2><p> 一般使用labelImg工具进行标注，<a href="https://github.com/heartexlabs/labelImg">github仓库</a></p><h2 id="数据集整理"><a href="#数据集整理" class="headerlink" title="数据集整理"></a>数据集整理</h2><p>将数据集整理为如下格式，在yolov5根目录下新建myData文件夹，并做如下处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">├─ yolov5根目录</span><br><span class="line">│    ├─ xxxxxx</span><br><span class="line">│    ├─ xxxxxx</span><br><span class="line">······</span><br><span class="line">│    ├─ myData</span><br><span class="line">│    │    ├─ (你的数据集名称)</span><br><span class="line">│    │    |    ├─ data.yaml</span><br><span class="line">│    │    │    ├─ train</span><br><span class="line">│    │    │    |    ├─ images</span><br><span class="line">│    │    │    |    └─ labels</span><br><span class="line">│    │    |    ├─ valid</span><br><span class="line">│    │    │    |    ├─ images</span><br><span class="line">│    │    │    |    └─ labels</span><br><span class="line">│    │    ├─ (你的数据集2)</span><br><span class="line">│    │    ├─ (你的数据集3)</span><br><span class="line">│    │    ├─ (xxxxxxxxxx)</span><br><span class="line">······</span><br></pre></td></tr></table></figure><p>将标注好的数据集按比例分别放入train和valid中的images、labels中，同时每份数据集的data.yaml写入如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nc: (你的数据集类别个数)  </span><br><span class="line">names: [&#x27;(你的类别名称1)&#x27;, &#x27;(你的类别名称2)&#x27;, ......]</span><br><span class="line">train: myData/(你的数据集名称)/train/images</span><br><span class="line">val：myData/(你的数据集名称)/valid/images</span><br></pre></td></tr></table></figure><p>最后，在 yolov5根目录/models/yolov5s.yaml 文件中，将 nc 更改为你的数据集类别个数，比如，你的数据集有2个类别，分别检测人和车，那么将nc改为2</p><h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><p>将yolov5s.pt模型文件放在yolov5根目录下，输入以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py --data myData/(你的数据集名称)/data.yaml --cfg yolov5s.yaml --weights yolov5s.pt</span><br></pre></td></tr></table></figure><h1 id="模型导出"><a href="#模型导出" class="headerlink" title="模型导出"></a>模型导出</h1><p>输入以下指令，可以得到onnx模型文件，以及模型对应的anchor，这里保留anchor文件，在后处理部分会用到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python export.py --weights (训练得到的模型) --include onnx --rknpu rk3588</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 香橙派5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 香橙派5 </tag>
            
            <tag> yolov5 </tag>
            
            <tag> rk3588s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Termux】第2期：通过 ssh 连接手机 Termux 服务器</title>
      <link href="/2022/12/28/Termux-2/"/>
      <url>/2022/12/28/Termux-2/</url>
      
        <content type="html"><![CDATA[<h1 id="上期回顾"><a href="#上期回顾" class="headerlink" title="上期回顾"></a>上期回顾</h1><p>在上一期中，在 Termux 软件中通过 proot 容器安装了 Ubuntu 22.04 系统。这个是完整的 Linux 系统，可以像操作远程服务器一样对容器进行操作。但由于是手机软件模拟的容器，在开启一些服务的时候并不能像一般的 Linux 系统一样操作，需要一些特殊的方式。本期主要讲述开启 ssh 服务，可以通过电脑端使用 VS Code 对手机服务器进行操作。</p><h1 id="进入-Termux-proot-容器"><a href="#进入-Termux-proot-容器" class="headerlink" title="进入 Termux proot 容器"></a>进入 Termux proot 容器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debian</span><br></pre></td></tr></table></figure><img src="pic2.jpg" width='400px'><h1 id="通过-apt-方式安装-openssh-server"><a href="#通过-apt-方式安装-openssh-server" class="headerlink" title="通过 apt 方式安装 openssh-server"></a>通过 apt 方式安装 openssh-server</h1><p>执行以下指令，安装 openssh-server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install openssh-server</span><br></pre></td></tr></table></figure><img src="pic3.jpg" width='400px'>安装完成后显示如下：<img src="pic4.jpg" width='400px'><h1 id="修改-openssh-默认启动端口"><a href="#修改-openssh-默认启动端口" class="headerlink" title="修改 openssh 默认启动端口"></a>修改 openssh 默认启动端口</h1><p>由于通过 proot 容器的方式安装系统，在这种方式下 Android 系统会对软件做出限制，使得软件无法启用1024以下的端口号。openssh默认端口号为22，需要将端口号更改为1024以上的端口，端口号可以随意指定，这里我们将端口号改为8022端口。</p><h2 id="进入-openssh-server-配置文件夹"><a href="#进入-openssh-server-配置文件夹" class="headerlink" title="进入 openssh-server 配置文件夹"></a>进入 openssh-server 配置文件夹</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/ssh</span><br></pre></td></tr></table></figure><h2 id="通过-vim-编辑器修改配置"><a href="#通过-vim-编辑器修改配置" class="headerlink" title="通过 vim 编辑器修改配置"></a>通过 vim 编辑器修改配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim sshd_config</span><br></pre></td></tr></table></figure><img src="pic5.jpg" width='400px'><ol><li>进入编辑器后，输入 i 进入编辑模式</li><li>找到 Port ，删除前面的 # ，将22修改为8022</li><li>按 ↓ ，找到 PermitRootLogin ，删除前面的 #，将后面的内容修改为 yes</li><li>修改完成后，按 Esc 退出编辑模式</li><li>输入 :wq ,回车保存退出</li></ol>如图所示，进入编辑器后可以看到如下界面：<img src="pic6.jpg" width='400px'>需要修改 Port 和 PermitRootLogin 两个属性<img src="pic7.jpg" width='400px'><img src="pic8.jpg" width='400px'><h1 id="开启-ssh-服务"><a href="#开启-ssh-服务" class="headerlink" title="开启 ssh 服务"></a>开启 ssh 服务</h1><p>配置完成后，执行以下指令，开启 ssh 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh start</span><br></pre></td></tr></table></figure><p>执行以下指令，检查 ssh 状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh status</span><br></pre></td></tr></table></figure><p>若显示 sshd is running，则启动成功，如图所示：<br><img src="pic9.jpg" width='400px'></p><h1 id="开机自动启动-ssh-服务"><a href="#开机自动启动-ssh-服务" class="headerlink" title="开机自动启动 ssh 服务"></a>开机自动启动 ssh 服务</h1><p>对于 tmoe 工具，可以通过修改配置文件实现启动容器的同时自动开启服务<br>执行如下指令，进入配置文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/etc/tmoe-linux/environment</span><br></pre></td></tr></table></figure><p>编辑 entrypoint 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim entrypoint</span><br></pre></td></tr></table></figure><p>写入如下指令，编辑方式同上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 开启 ssh 服务</span><br><span class="line">service ssh start</span><br></pre></td></tr></table></figure><p>保存退出，方式同上<br>如图所示：<br><img src="pic10.jpg" width='400px'><br><img src="pic11.jpg" width='400px'></p><h1 id="验证-ssh-服务是否自启"><a href="#验证-ssh-服务是否自启" class="headerlink" title="验证 ssh 服务是否自启"></a>验证 ssh 服务是否自启</h1><p>输入如下指令，退出容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">logout</span></span><br></pre></td></tr></table></figure><p>输入如下指令，重新启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debian</span><br></pre></td></tr></table></figure><p>如果看到以下语句，则自启成功<br><img src="pic12.jpg" width='400px'></p>]]></content>
      
      
      <categories>
          
          <category> Termux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手机搭建服务器 </tag>
            
            <tag> Termux </tag>
            
            <tag> 开启 SSH 服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Termux】第1期：在手机中安装Linux系统</title>
      <link href="/2022/12/26/Termux-1/"/>
      <url>/2022/12/26/Termux-1/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-Termux"><a href="#什么是-Termux" class="headerlink" title="什么是 Termux"></a>什么是 Termux</h1><p>Termux 是一个 <strong>Android 终端仿真应用程序</strong>，用于在 <strong>Android 手机上搭建 Linux 环境</strong>， <strong>不需要 root 权限</strong> Termux 就可以正常运行。Termux 可以实现 Linux 下的许多基本操作，可以使用 Termux 安装 python，并实现 python 编程。最重要的是，可以在 Termux 中安装容器，实现<strong>完整的 Linux 系统</strong>。</p><h1 id="Termux-安装"><a href="#Termux-安装" class="headerlink" title="Termux 安装"></a>Termux 安装</h1><h2 id="Termux下载"><a href="#Termux下载" class="headerlink" title="Termux下载"></a>Termux下载</h2><p>Termux 可以在<a href="https://github.com/termux/termux-app/releases/download/v0.118.0/termux-app_v0.118.0+github-debug_universal.apk">github中下载</a><br>如果无法访问github，也可以通过<a href="https://mirrors.tuna.tsinghua.edu.cn/fdroid/repo/com.termux_118.apk">清华镜像源下载</a></p><h1 id="开始部署-Linux-环境"><a href="#开始部署-Linux-环境" class="headerlink" title="开始部署 Linux 环境"></a>开始部署 Linux 环境</h1><p>对于新手而言，推荐使用别人开发好的脚本。这里推荐使用 <strong>天萌 tmoe</strong> 脚本，里面集成了很多的功能，对新手比较友好。缺点是安装好的环境有一些冗余，大家可以在用熟后自己部署 Linux 环境。<br>打开 Termux ，界面如下：<br><img src="pic1.jpg"><br>如果可以访问github，使用以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LO --compressed https://raw.githubusercontent.com/2moe/tmoe/2/2.awk; awk -f 2.awk</span><br></pre></td></tr></table></figure><p>如果无法访问github，使用以下指令，从gitee仓库中克隆：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LO https://gitee.com/mo2/linux/raw/2/2.awk; awk -f 2.awk</span><br></pre></td></tr></table></figure><p>在执行指令后，会自动下载脚本，选择通过gitee下载<br><img src="pic2.jpg"></p><p>可以看到选择语言界面，语言选择中文<br><img src="pic3.jpg"></p><p>这里选择proot容器,选择后会自动安装相关依赖。安装过程中会提示换源，按回车选择北外源<br><img src="pic4.jpg" width='400px'></p><p>执行过程中会遇到这样的选项，直接按回车即可<br><img src="pic5.jpg" width='400px'></p><p>继续选择proot容器<br><img src="pic6.jpg" width='400px'></p><p>终端配色看个人喜好，这里选择了neon<br><img src="pic7.jpg" width='400px'></p><p>字体选择Inconsolata-go(粗)<br><img src="pic8.jpg" width='400px'></p><p>修改小键选择 Yes<br><img src="pic9.jpg" width='400px'></p><p>DNS选择第一个即可<br><img src="pic10.jpg" width='400px'></p><p>一言看个人喜好，这里没有开启一言功能<br><img src="pic11.jpg" width='400px'></p><p>时区根据个人所在地选择<br><img src="pic12.jpg" width='400px'></p><p>挂载目录推荐选择挂载部分目录，这里只挂载了手机中Download目录，即Termux只可以读取手机中Download目录下的内容<br><img src="pic13.jpg" width='400px'></p><p>目录挂载的位置，这里挂载到了/home中<br><img src="pic14.jpg" width='400px'></p><p>选择proot容器中安装的系统，这里安装Ubuntu 22.04系统<br><img src="pic15.jpg" width='400px'><br><img src="pic16.jpg" width='400px'><br><img src="pic17.jpg" width='400px'></p><p>选择启动即可<br><img src="pic18.jpg" width='400px'></p><p>接下来需要等待一段时间，安装完成后，出现如下界面，选择 <strong>否</strong><br><img src="pic19.jpg" width='400px'></p><p>这里选择不配置zsh<br><img src="pic20.jpg" width='400px'></p><p>选择删除zsh.sh<br><img src="pic21.jpg" width='400px'></p><p>选择不启动 tmoe tools<br><img src="pic22.jpg" width='400px'></p><p>配置完成后，即可进入Ubuntu 22.04系统<br><img src="pic23.jpg" width='400px'></p><h1 id="在proot容器中安装-tmoe-tools"><a href="#在proot容器中安装-tmoe-tools" class="headerlink" title="在proot容器中安装 tmoe tools"></a>在proot容器中安装 tmoe tools</h1><p>先前已经在Termux中安装了tmoe tools，这里在容器中同样安装 tmoe tools，方便后续对系统进行软件安装和配置<br>输入如下指令后，进行 tmoe tools 自动安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmoe</span><br></pre></td></tr></table></figure><p>安装完成后出现如下界面，选择退出即可<br><img src="pic24.jpg" width='400px'></p><h1 id="退出容器，返回-Termux"><a href="#退出容器，返回-Termux" class="headerlink" title="退出容器，返回 Termux"></a>退出容器，返回 Termux</h1><p>输入如下指令，直至出现 <strong>按回车键返回</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><img src="pic25.jpg" width='400px'><p>按下回车，按 ——&gt; 选择cancel<br><img src="pic26.jpg" width='400px'><br><img src="pic27.jpg" width='400px'><br><img src="pic28.jpg" width='400px'><br><img src="pic29.jpg" width='400px'></p><p>当出现如下界面时，说明已经返回到了 Termux<br><img src="pic30.jpg" width='400px'><br>输入如下指令，清理屏幕</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear</span><br></pre></td></tr></table></figure><img src="pic31.jpg" width='400px'><p>至此，安装完成</p><h1 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h1><p>退出Termux后，想要重新进入容器，可以输入如下指令，进入容器（即刚刚安装的Ubuntu系统）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debian</span><br></pre></td></tr></table></figure><p>在进入容器后，即可按照正常的Linux系统进行使用</p><p>进入容器后，想要退出容器返回 Termux ，可以输入如下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">logout</span></span><br></pre></td></tr></table></figure><p>在容器中想要退出程序的时候，最好<strong>先退出容器再关闭app</strong>，防止丢失数据</p>]]></content>
      
      
      <categories>
          
          <category> Termux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手机搭建服务器 </tag>
            
            <tag> Termux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VisionTransformer 论文解读</title>
      <link href="/2022/12/23/VisionTransformer/"/>
      <url>/2022/12/23/VisionTransformer/</url>
      
        <content type="html"><![CDATA[<h1 id="Transformer结构"><a href="#Transformer结构" class="headerlink" title="Transformer结构"></a>Transformer结构</h1><p><strong>Vision Transformer的结构如图所示：</strong><br><img src="pic1.png" height="500px"><br>在Vision Transformer中，主要使用的结构为<strong>左侧的编码器</strong></p><h1 id="将Transformer直接用在视觉领域的问题"><a href="#将Transformer直接用在视觉领域的问题" class="headerlink" title="将Transformer直接用在视觉领域的问题"></a>将Transformer直接用在视觉领域的问题</h1><p>想要使用Transformer结构，需要把图片转化为一行Token。<strong>而最朴素的想法是直接将图片的像素一行一行读取，转化为一排的Token</strong>，如图：<br><img src="pic2.png" height="250px"><br>但是这样的做法会导致输入数据复杂度会随着图片的长度和宽度<strong>平方级增长</strong></p><h1 id="Transformer用在视觉领域的解决方案"><a href="#Transformer用在视觉领域的解决方案" class="headerlink" title="Transformer用在视觉领域的解决方案"></a>Transformer用在视觉领域的解决方案</h1><p><strong>1.采用局部注意力机制</strong><br><strong>2.改进attention公式</strong><br><strong>3.图像化整为零，切分为patch</strong><br>每一种方法都可行，也都有相关论文发表。在ViT中，采用的是第三种方案。</p><h1 id="ViT模型架构"><a href="#ViT模型架构" class="headerlink" title="ViT模型架构"></a>ViT模型架构</h1><h2 id="ViT模型架构图"><a href="#ViT模型架构图" class="headerlink" title="ViT模型架构图"></a>ViT模型架构图</h2><img src="pic3.png" height="400px"><h2 id="ViT模型步骤讲解"><a href="#ViT模型步骤讲解" class="headerlink" title="ViT模型步骤讲解"></a>ViT模型步骤讲解</h2><h3 id="1-图片划分为patch"><a href="#1-图片划分为patch" class="headerlink" title="1.图片划分为patch"></a>1.图片划分为patch</h3><p>模型首先将图片划分为一个一个的patch</p><h3 id="2-patch转化为embedding"><a href="#2-patch转化为embedding" class="headerlink" title="2.patch转化为embedding"></a>2.patch转化为embedding</h3><p>由于正方形的patch无法直接作为Transformer的输入，模型采用Liner Projection将正方形的patch拉成一条线，并映射到Transformer的输入的维度</p><h3 id="3-位置embedding与tokenembedding相加"><a href="#3-位置embedding与tokenembedding相加" class="headerlink" title="3.位置embedding与tokenembedding相加"></a>3.位置embedding与tokenembedding相加</h3><p>在这一步中，论文中生成了CLS符号的token embedding，并生成了所有符号的position embedding，最后将token embedding与position embedding相加</p><h3 id="4-输入到Transformer-Encoder中"><a href="#4-输入到Transformer-Encoder中" class="headerlink" title="4.输入到Transformer Encoder中"></a>4.输入到Transformer Encoder中</h3><h3 id="5-通过CLS符号做多分类任务"><a href="#5-通过CLS符号做多分类任务" class="headerlink" title="5.通过CLS符号做多分类任务"></a>5.通过CLS符号做多分类任务</h3>]]></content>
      
      
      <categories>
          
          <category> 论文解读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文解读 </tag>
            
            <tag> VisionTransformer </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
