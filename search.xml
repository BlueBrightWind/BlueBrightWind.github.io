<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【香橙派】RK3588安装 watchload 负载监控工具</title>
      <link href="/2025/01/03/Orangepi-Watchload-Tool/"/>
      <url>/2025/01/03/Orangepi-Watchload-Tool/</url>
      
        <content type="html"><![CDATA[<h1 id="watchload-负载监控工具"><a href="#watchload-负载监控工具" class="headerlink" title="watchload 负载监控工具"></a>watchload 负载监控工具</h1><h2 id="工具简介"><a href="#工具简介" class="headerlink" title="工具简介"></a>工具简介</h2><p>该工具旨在方便地查看设备<code>(CPU/GPU/RGA/NPU/MEM)</code>的信息，并为设备提供在<code>不同工作模式之间切换</code>的能力。</p><h2 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h2><p>用如下脚本安装即可，脚本会自动下载源码并编译安装。如果需要使用代理，可以设置 <code>ALLOW_PROXY=yes</code>，并设置 <code>GITHUB_PROXY</code> 为代理地址。若需要在安装后清理源码，可以取消注释 <code># Clean Files</code> 部分。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="comment"># Proxy Settings</span></span><br><span class="line">ALLOW_PROXY=<span class="built_in">yes</span></span><br><span class="line">GITHUB_PROXY=https://gh.xmly.dev/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Repository</span></span><br><span class="line">WATCHLOAD_REPOSITORY=https://github.com/BlueBrightWind/watchload-rk3588.git</span><br><span class="line">WATCHLOAD_REPOSITORY_BRANCH=main</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set Install Path</span></span><br><span class="line">WATCHLOAD_INSTALL_PATH=/usr/local/watchload</span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$ALLOW_PROXY</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    WATCHLOAD_REPOSITORY=$GITHUB_PROXY<span class="variable">$WATCHLOAD_REPOSITORY</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Dependencies</span></span><br><span class="line">sudo apt install -y git</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Tool</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> -b <span class="variable">$WATCHLOAD_REPOSITORY_BRANCH</span> --depth=1 <span class="variable">$WATCHLOAD_REPOSITORY</span> watchload</span><br><span class="line"><span class="built_in">cd</span> watchload</span><br><span class="line">bash install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Clean Files</span></span><br><span class="line"><span class="comment"># cd ~</span></span><br><span class="line"><span class="comment"># rm -rf watchload</span></span><br></pre></td></tr></table></figure><h2 id="工具截图"><a href="#工具截图" class="headerlink" title="工具截图"></a>工具截图</h2><img src="watchload.jpg" width='800px'>]]></content>
      
      
      <categories>
          
          <category> 香橙派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 香橙派 </tag>
            
            <tag> rk3588 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【香橙派】RK3588搭建 C++ RKNN 开发环境指南</title>
      <link href="/2024/12/30/Orangepi-Dev-Env/"/>
      <url>/2024/12/30/Orangepi-Dev-Env/</url>
      
        <content type="html"><![CDATA[<h1 id="基本环境搭建"><a href="#基本环境搭建" class="headerlink" title="基本环境搭建"></a>基本环境搭建</h1><h2 id="安装-Rockchip-MPP-和-Rockchip-RGA"><a href="#安装-Rockchip-MPP-和-Rockchip-RGA" class="headerlink" title="安装 Rockchip MPP 和 Rockchip RGA"></a>安装 Rockchip MPP 和 Rockchip RGA</h2><p>用如下脚本安装即可，脚本会自动下载源码并编译安装。如果需要使用代理，可以设置 <code>ALLOW_PROXY=yes</code>，并设置 <code>GITHUB_PROXY</code> 为代理地址。若需要在安装后清理源码，可以取消注释 <code># Clean Files</code> 部分。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#############################################################</span></span><br><span class="line"><span class="comment"># Proxy Settings</span></span><br><span class="line">ALLOW_PROXY=<span class="built_in">yes</span></span><br><span class="line">GITHUB_PROXY=https://gh.xmly.dev/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Media Repository</span></span><br><span class="line">MPP_REPOSITORY=https://github.com/nyanmisaka/mpp.git</span><br><span class="line">RGA_REPOSITORY=https://github.com/nyanmisaka/rk-mirrors.git</span><br><span class="line"></span><br><span class="line">MPP_REPOSITORY_BRANCH=jellyfin-mpp</span><br><span class="line">RGA_REPOSITORY_BRANCH=jellyfin-rga</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set Install Path</span></span><br><span class="line">MPP_INSTALL_PATH=/usr/local/mpp</span><br><span class="line">RGA_INSTALL_PATH=/usr/local/rga</span><br><span class="line"><span class="comment">#############################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Update Github Repository</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$ALLOW_PROXY</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    MPP_REPOSITORY=$GITHUB_PROXY<span class="variable">$MPP_REPOSITORY</span></span><br><span class="line">    RGA_REPOSITORY=$GITHUB_PROXY<span class="variable">$RGA_REPOSITORY</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Build Dependencies</span></span><br><span class="line">apt install -y git cmake build-essential pkg-config meson ninja-build</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build Rockchip MPP</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> -b <span class="variable">$MPP_REPOSITORY_BRANCH</span> --depth=1 <span class="variable">$MPP_REPOSITORY</span> mpp</span><br><span class="line"><span class="built_in">cd</span> mpp</span><br><span class="line"><span class="built_in">mkdir</span> rkmpp-build</span><br><span class="line"><span class="built_in">cd</span> rkmpp-build</span><br><span class="line">cmake \</span><br><span class="line">    -DCMAKE_INSTALL_PREFIX=<span class="variable">$MPP_INSTALL_PATH</span> \</span><br><span class="line">    -DCMAKE_BUILD_TYPE=Release \</span><br><span class="line">    -DBUILD_SHARED_LIBS=ON \</span><br><span class="line">    -DBUILD_TEST=OFF \</span><br><span class="line">    ..</span><br><span class="line">make -j $(<span class="built_in">nproc</span>)</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build Rockchip RGA</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> -b <span class="variable">$RGA_REPOSITORY_BRANCH</span> --depth=1 <span class="variable">$RGA_REPOSITORY</span> rga</span><br><span class="line"><span class="built_in">cd</span> rga</span><br><span class="line">meson setup rkrga-build \</span><br><span class="line">    --prefix=<span class="variable">$RGA_INSTALL_PATH</span> \</span><br><span class="line">    --libdir=lib \</span><br><span class="line">    --buildtype=release \</span><br><span class="line">    --default-library=shared \</span><br><span class="line">    -Dcpp_args=-fpermissive \</span><br><span class="line">    -Dlibdrm=<span class="literal">false</span> \</span><br><span class="line">    -Dlibrga_demo=<span class="literal">false</span></span><br><span class="line">meson configure rkrga-build</span><br><span class="line">ninja -C rkrga-build install</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set Bash Environment</span></span><br><span class="line"><span class="built_in">echo</span>  &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;# Rockchip MPP&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$MPP_INSTALL_PATH</span>/lib:<span class="string">&#x27;$LD_LIBRARY_PATH&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">export</span> PKG_CONFIG_PATH=<span class="variable">$MPP_INSTALL_PATH</span>/lib/pkgconfig:<span class="string">&#x27;$PKG_CONFIG_PATH&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span>  &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;# Rockchip RGA&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$RGA_INSTALL_PATH</span>/lib:<span class="string">&#x27;$LD_LIBRARY_PATH&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">export</span> PKG_CONFIG_PATH=<span class="variable">$RGA_INSTALL_PATH</span>/lib/pkgconfig:<span class="string">&#x27;$PKG_CONFIG_PATH&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Clean Files</span></span><br><span class="line"><span class="comment"># cd ~</span></span><br><span class="line"><span class="comment"># rm -rf mpp rga</span></span><br></pre></td></tr></table></figure><h2 id="安装-Rockchip-RKNN"><a href="#安装-Rockchip-RKNN" class="headerlink" title="安装 Rockchip RKNN"></a>安装 Rockchip RKNN</h2><p>用如下脚本安装即可，脚本会自动下载源码并编译安装。如果需要使用代理，可以设置 <code>ALLOW_PROXY=yes</code>，并设置 <code>GITHUB_PROXY</code> 为代理地址。若需要在安装后清理源码，可以取消注释 <code># Clean Files</code> 部分。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="comment"># Proxy Settings</span></span><br><span class="line">ALLOW_PROXY=<span class="built_in">yes</span></span><br><span class="line">GITHUB_PROXY=https://gh.xmly.dev/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Media Repository</span></span><br><span class="line">RKNN_REPOSITORY=https://github.com/airockchip/rknn-toolkit2.git</span><br><span class="line">RKNN_REPOSITORY_BRANCH=master</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set Install Path</span></span><br><span class="line">RKNN_INSTALL_PATH=/usr/local/rknn</span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Update Github Repository</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$ALLOW_PROXY</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">RKNN_REPOSITORY=$GITHUB_PROXY<span class="variable">$RKNN_REPOSITORY</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Build Dependencies</span></span><br><span class="line">apt install -y git cmake</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build Rockchip MPP</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> -b <span class="variable">$RKNN_REPOSITORY_BRANCH</span> --depth=1 <span class="variable">$RKNN_REPOSITORY</span> rknn</span><br><span class="line"><span class="built_in">cd</span> rknn</span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$RKNN_INSTALL_PATH</span>/include</span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$RKNN_INSTALL_PATH</span>/lib</span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$RKNN_INSTALL_PATH</span>/lib/cmake</span><br><span class="line"><span class="built_in">cp</span> -r rknpu2/runtime/Linux/librknn_api/include/* <span class="variable">$RKNN_INSTALL_PATH</span>/include</span><br><span class="line"><span class="built_in">cp</span> -r rknpu2/runtime/Linux/librknn_api/aarch64/* <span class="variable">$RKNN_INSTALL_PATH</span>/lib</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt;&gt; $RKNN_INSTALL_PATH/lib/cmake/RKNNConfig.cmake</span></span><br><span class="line"><span class="string">set(PREFIX $RKNN_INSTALL_PATH)</span></span><br><span class="line"><span class="string">set(RKNN_INCLUDE_DIRS \$&#123;PREFIX&#125;/include)</span></span><br><span class="line"><span class="string">set(RKNN_LIBS \$&#123;PREFIX&#125;/lib/librknnrt.so)</span></span><br><span class="line"><span class="string">if(EXISTS &quot;\$&#123;RKNN_INCLUDE_DIRS&#125;&quot; AND EXISTS &quot;\$&#123;RKNN_LIBS&#125;&quot;)</span></span><br><span class="line"><span class="string">    set(RKNN_FOUND TRUE)</span></span><br><span class="line"><span class="string">else()</span></span><br><span class="line"><span class="string">    set(RKNN_FOUND FALSE)</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set Bash Environment</span></span><br><span class="line"><span class="built_in">echo</span>  &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;# Rockchip RKNN&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$RKNN_INSTALL_PATH</span>/lib:<span class="string">&#x27;$LD_LIBRARY_PATH&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">export</span> CMAKE_PREFIX_PATH=<span class="variable">$RKNN_INSTALL_PATH</span>/lib/cmake:<span class="string">&#x27;$CMAKE_PREFIX_PATH&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Clean Files</span></span><br><span class="line"><span class="comment"># cd ~</span></span><br><span class="line"><span class="comment"># rm -rf rknn</span></span><br></pre></td></tr></table></figure><h1 id="高级环境搭建"><a href="#高级环境搭建" class="headerlink" title="高级环境搭建"></a>高级环境搭建</h1><h2 id="安装-Gstreamer"><a href="#安装-Gstreamer" class="headerlink" title="安装 Gstreamer"></a>安装 Gstreamer</h2><p>用如下脚本安装即可。注意：在执行 <code>meson setup</code>时，可能会遇到下载问题。若出现下载问题，在执行完成后可以通过 <code>meson setup gstreamer-build --reconfigure --wipe</code> 重新配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#####################################################################</span></span><br><span class="line"><span class="comment"># Repository</span></span><br><span class="line">GST_REPOSITORY=https://gitlab.freedesktop.org/gstreamer/gstreamer.git</span><br><span class="line"></span><br><span class="line">GST_REPOSITORY_BRANCH=main</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set Install Path</span></span><br><span class="line">GST_INSTALL_PATH=/usr/local/gstreamer</span><br><span class="line"><span class="comment">#####################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Build Dependencies</span></span><br><span class="line">apt install -y git build-essential pkg-config meson ninja-build flex bison openssl libssl-dev libudev-dev python3-pip</span><br><span class="line">pip3 install -U meson</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> -b <span class="variable">$GST_REPOSITORY_BRANCH</span> --depth=1 <span class="variable">$GST_REPOSITORY</span> gstreamer</span><br><span class="line"><span class="built_in">cd</span> gstreamer</span><br><span class="line">meson setup gstreamer-build \</span><br><span class="line">    --prefix=<span class="variable">$GST_INSTALL_PATH</span> \</span><br><span class="line">    --libdir=lib \</span><br><span class="line">    --buildtype=release \</span><br><span class="line">    --default-library=shared \</span><br><span class="line">    -Dcpp_args=-fpermissive \</span><br><span class="line">    -Dpython=disabled \</span><br><span class="line">    -Dgpl=enabled \</span><br><span class="line">    -Dpackage-origin=rockchip \</span><br><span class="line">    -Dpackage-name=rockchip-gstreamer \</span><br><span class="line">    -Dqt5=disabled \</span><br><span class="line">    -Dqt6=disabled</span><br><span class="line"></span><br><span class="line">meson compile -C gstreamer-build</span><br><span class="line">meson install -C gstreamer-build</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set Bash Environment</span></span><br><span class="line"><span class="built_in">echo</span>  &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;# Gstreamer&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">export</span> PATH=<span class="variable">$GST_INSTALL_PATH</span>/bin:<span class="string">&#x27;$PATH&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$GST_INSTALL_PATH</span>/lib:<span class="string">&#x27;$LD_LIBRARY_PATH&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">export</span> PKG_CONFIG_PATH=<span class="variable">$GST_INSTALL_PATH</span>/lib/pkgconfig:<span class="string">&#x27;$PKG_CONFIG_PATH&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Clean Files</span></span><br><span class="line"><span class="comment"># cd ~</span></span><br><span class="line"><span class="comment"># rm -rf gstreamer</span></span><br></pre></td></tr></table></figure><h2 id="安装-Gstreamer-Rockchip-插件"><a href="#安装-Gstreamer-Rockchip-插件" class="headerlink" title="安装 Gstreamer Rockchip 插件"></a>安装 Gstreamer Rockchip 插件</h2><p>用如下脚本安装即可，脚本会自动下载源码并编译安装。如果需要使用代理，可以设置 <code>ALLOW_PROXY=yes</code>，并设置 <code>GITHUB_PROXY</code> 为代理地址。若需要在安装后清理源码，可以取消注释 <code># Clean Files</code> 部分。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="comment"># Proxy Settings</span></span><br><span class="line">ALLOW_PROXY=<span class="built_in">yes</span></span><br><span class="line">GITHUB_PROXY=https://gh.xmly.dev/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Repository</span></span><br><span class="line">GST_PLUGIN_REPOSITORY=https://github.com/JeffyCN/mirrors.git</span><br><span class="line">GST_PLUGIN_REPOSITORY_BRANCH=gstreamer-rockchip</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set Install Path</span></span><br><span class="line">GST_PLUGIN_INSTALL_PATH=/usr/local/gstreamer</span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Update Github Repository</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$ALLOW_PROXY</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">GST_PLUGIN_REPOSITORY=$GITHUB_PROXY<span class="variable">$GST_PLUGIN_REPOSITORY</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Build Dependencies</span></span><br><span class="line">apt install -y git build-essential pkg-config meson ninja-build</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> -b <span class="variable">$GST_PLUGIN_REPOSITORY_BRANCH</span> --depth=1 <span class="variable">$GST_PLUGIN_REPOSITORY</span> gstreamer-rockchip</span><br><span class="line"><span class="built_in">cd</span> gstreamer-rockchip</span><br><span class="line">meson setup gstreamer-plugin-build \</span><br><span class="line">    --prefix=<span class="variable">$GST_PLUGIN_INSTALL_PATH</span> \</span><br><span class="line">    --libdir=lib \</span><br><span class="line">    --buildtype=release \</span><br><span class="line">    -Dcpp_args=-fpermissive \</span><br><span class="line">    -Dpackage-name=gstreamer-rockchip \</span><br><span class="line">    -Dpackage-origin=gstreamer-rockchip</span><br><span class="line"></span><br><span class="line">meson compile -C gstreamer-plugin-build</span><br><span class="line">meson install -C gstreamer-plugin-build</span><br><span class="line"></span><br><span class="line"><span class="comment"># Clean Files</span></span><br><span class="line"><span class="comment"># cd ~</span></span><br><span class="line"><span class="comment"># rm -rf gstreamer-rockchip</span></span><br></pre></td></tr></table></figure><p>安装完成后，可以通过 <code>gst-inspect-1.0 | grep mpp</code> 查看是否安装成功，若显示如下内容，则安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gst-inspect-1.0 | grep mpp</span><br><span class="line">rockchipmpp:  mpph264enc: Rockchip Mpp H264 Encoder</span><br><span class="line">rockchipmpp:  mpph265enc: Rockchip Mpp H265 Encoder</span><br><span class="line">rockchipmpp:  mppjpegdec: Rockchip<span class="string">&#x27;s MPP JPEG image decoder</span></span><br><span class="line"><span class="string">rockchipmpp:  mppjpegenc: Rockchip Mpp JPEG Encoder</span></span><br><span class="line"><span class="string">rockchipmpp:  mppvideodec: Rockchip&#x27;</span>s MPP video decoder</span><br><span class="line">rockchipmpp:  mppvp8enc: Rockchip Mpp VP8 Encoder</span><br><span class="line">rockchipmpp:  mppvpxalphadecodebin: VP8/VP9 Alpha Decoder</span><br><span class="line">typefindfunctions: audio/x-musepack: mpc, mpp, mp+</span><br></pre></td></tr></table></figure><h2 id="安装-OpenCL-动态库"><a href="#安装-OpenCL-动态库" class="headerlink" title="安装 OpenCL 动态库"></a>安装 OpenCL 动态库</h2><p>用如下脚本安装即可。注意：仅测试过 <code>ubuntu rockchip</code> 的系统，其他系统暂未测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">apt install -y software-properties-common clinfo</span><br><span class="line">add-apt-repository -y ppa:jjriek/panfork-mesa</span><br><span class="line">apt install -y libmali-g610-x11</span><br></pre></td></tr></table></figure><p>安装后可以通过 <code>clinfo</code> 查看是否安装成功</p><h2 id="安装-OpenCV"><a href="#安装-OpenCV" class="headerlink" title="安装 OpenCV"></a>安装 OpenCV</h2><p>用如下脚本安装即可，脚本会自动下载源码并编译安装。如果需要使用代理，可以设置 <code>ALLOW_PROXY=yes</code>，并设置 <code>GITHUB_PROXY</code> 为代理地址。若需要在安装后清理源码，可以取消注释 <code># Clean Files</code> 部分。</p><p>注意：该脚本仅仅开起了 <code>core highgui imgcodecs imgproc videoio</code> 模块，为精简版 OpenCV，若需要其他模块，可以自行添加，且视频编解码模块仅开启了 <code>Gstreamer</code> ，未使用 <code>FFMPEG</code>。</p><p>注意：该脚本使用 <code>Wayland</code> 作为显示后端，若需要使用 <code>GTK</code> 显示后端，可以将 <code>-DWITH_GTK=OFF</code> 改为 <code>-DWITH_GTK=ON</code>，并执行 <code>apt install libgtk-3-dev</code> 安装 <code>GTK</code> 依赖。</p><p>注意：该脚本启用了 <code>OpenCL</code> 支持，若不需要 <code>OpenCL</code> 支持，可以将 <code>-DWITH_OPENCL=ON</code> 改为 <code>-DWITH_OPENCL=OFF</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="comment"># Proxy Settings</span></span><br><span class="line">ALLOW_PROXY=<span class="built_in">yes</span></span><br><span class="line">GITHUB_PROXY=https://gh.xmly.dev/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Media Repository</span></span><br><span class="line">OPENCV_REPOSITORY=https://github.com/opencv/opencv.git</span><br><span class="line">OPENCV_REPOSITORY_BRANCH=4.10.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set Install Path</span></span><br><span class="line">OPENCV_INSTALL_PATH=/usr/local/opencv</span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Update Github Repository</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$ALLOW_PROXY</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">OPENCV_REPOSITORY=$GITHUB_PROXY<span class="variable">$OPENCV_REPOSITORY</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Build Dependencies</span></span><br><span class="line">apt install -y git cmake build-essential wayland-protocols libwayland-dev \</span><br><span class="line">    libwayland-client0 libwayland-cursor0 libwayland-egl1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build OpenCV</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> -b <span class="variable">$OPENCV_REPOSITORY_BRANCH</span> --depth=1 <span class="variable">$OPENCV_REPOSITORY</span> opencv</span><br><span class="line"><span class="built_in">cd</span> opencv</span><br><span class="line"><span class="built_in">mkdir</span> rkopencv-build</span><br><span class="line"><span class="built_in">cd</span> rkopencv-build</span><br><span class="line">cmake \</span><br><span class="line">    -DBUILD_DOCS=OFF \</span><br><span class="line">    -DBUILD_SHARED_LIBS=ON \</span><br><span class="line">    -DBUILD_FAT_JAVA_LIB=OFF \</span><br><span class="line">    -DBUILD_TESTS=OFF \</span><br><span class="line">    -DBUILD_TIFF=ON \</span><br><span class="line">    -DBUILD_JASPER=ON \</span><br><span class="line">    -DBUILD_JPEG=ON \</span><br><span class="line">    -DBUILD_PNG=ON \</span><br><span class="line">    -DBUILD_ZLIB=ON \</span><br><span class="line">    -DBUILD_OPENEXR=OFF \</span><br><span class="line">    -DBUILD_opencv_apps=OFF \</span><br><span class="line">    -DBUILD_opencv_calib3d=OFF \</span><br><span class="line">    -DBUILD_opencv_contrib=OFF \</span><br><span class="line">    -DBUILD_opencv_features2d=OFF \</span><br><span class="line">    -DBUILD_opencv_flann=OFF \</span><br><span class="line">    -DBUILD_opencv_gpu=OFF \</span><br><span class="line">    -DBUILD_opencv_java=OFF \</span><br><span class="line">    -DBUILD_opencv_legacy=OFF \</span><br><span class="line">    -DBUILD_opencv_ml=OFF \</span><br><span class="line">    -DBUILD_opencv_nonfree=OFF \</span><br><span class="line">    -DBUILD_opencv_objdetect=OFF \</span><br><span class="line">    -DBUILD_opencv_ocl=OFF \</span><br><span class="line">    -DBUILD_opencv_photo=OFF \</span><br><span class="line">    -DBUILD_opencv_python2=OFF \</span><br><span class="line">    -DBUILD_opencv_python3=OFF \</span><br><span class="line">    -DBUILD_opencv_gapi=OFF \</span><br><span class="line">    -DBUILD_opencv_highgui=ON \</span><br><span class="line">    -DBUILD_opencv_stitching=OFF \</span><br><span class="line">    -DBUILD_opencv_superres=OFF \</span><br><span class="line">    -DBUILD_opencv_ts=OFF \</span><br><span class="line">    -DBUILD_opencv_video=OFF \</span><br><span class="line">    -DBUILD_opencv_videostab=OFF \</span><br><span class="line">    -DBUILD_opencv_videoio=ON \</span><br><span class="line">    -DBUILD_opencv_world=OFF \</span><br><span class="line">    -DBUILD_opencv_lengcy=OFF \</span><br><span class="line">    -DBUILD_opencv_dnn=OFF \</span><br><span class="line">    -DWITH_1394=OFF \</span><br><span class="line">    -DWITH_EIGEN=OFF \</span><br><span class="line">    -DWITH_FFMPEG=OFF \</span><br><span class="line">    -DWITH_GIGEAPI=OFF \</span><br><span class="line">    -DWITH_GSTREAMER=ON \</span><br><span class="line">    -DWITH_GTK=OFF \</span><br><span class="line">    -DWITH_WAYLAND=ON \</span><br><span class="line">    -DWITH_PVAPI=OFF \</span><br><span class="line">    -DWITH_V4L=ON \</span><br><span class="line">    -DWITH_LIBV4L=OFF \</span><br><span class="line">    -DWITH_CUDA=OFF \</span><br><span class="line">    -DWITH_CUFFT=OFF \</span><br><span class="line">    -DWITH_OPENCL=ON \</span><br><span class="line">    -DWITH_OPENCLAMDBLAS=OFF \</span><br><span class="line">    -DWITH_OPENCLAMDFFT=OFF \</span><br><span class="line">    -DWITH_OPENMP=ON \</span><br><span class="line">    -DCMAKE_BUILD_TYPE=RELEASE \</span><br><span class="line">    -DCMAKE_INSTALL_PREFIX=<span class="variable">$OPENCV_INSTALL_PATH</span> \</span><br><span class="line">    ..</span><br><span class="line">make -j $(<span class="built_in">nproc</span>)</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set Bash Environment</span></span><br><span class="line"><span class="built_in">echo</span>  &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;# OpenCV&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$OPENCV_INSTALL_PATH</span>/lib:<span class="string">&#x27;$LD_LIBRARY_PATH&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">export</span> CMAKE_PREFIX_PATH=<span class="variable">$OPENCV_INSTALL_PATH</span>/lib/cmake:<span class="string">&#x27;$CMAKE_PREFIX_PATH&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Clean Files</span></span><br><span class="line"><span class="comment"># cd ~</span></span><br><span class="line"><span class="comment"># rm -rf rknn</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 香橙派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 香橙派 </tag>
            
            <tag> rk3588 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【香橙派】RK3588s部署yolov5 - 训练部分</title>
      <link href="/2023/03/18/Orangepi-Yolov5-Train/"/>
      <url>/2023/03/18/Orangepi-Yolov5-Train/</url>
      
        <content type="html"><![CDATA[<h1 id="克隆-yolov5-仓库"><a href="#克隆-yolov5-仓库" class="headerlink" title="克隆 yolov5 仓库"></a>克隆 yolov5 仓库</h1><p>yolov5 有很多个版本，这里我们采用官方修改过的 yolov5 进行训练，<a href="https://github.com/airockchip/yolov5">github 仓库</a></p><p>根据官方介绍，此仓库有如下特性：</p><ul><li><p>  基于 <a href="https://github.com/ultralytics/yolov5">https://github.com/ultralytics/yolov5</a> 代码修改，设配 rknpu 设备的部署优化</p></li><li><p>  maxpool/ focus 优化，输出改为个 branch 分支的输出。以上优化代码使用插入宏实现，不影响原来的训练逻辑，这个优化兼容修改前的权重，故支持官方给的预训练权重。</p></li><li><p>  修改激活函数 silu 为 relu</p></li><li><p>  训练的相关内容请参考 README.md 说明</p></li><li><p>导出模型时 python export.py –rknpu {rk_platform} 即可导出优化模型<br>  (rk_platform 支持 rk1808, rv1109, rv1126, rk3399pro, rk3566, rk3568, rk3588, rv1103, rv1106)</p></li></ul><h1 id="准备数据集"><a href="#准备数据集" class="headerlink" title="准备数据集"></a>准备数据集</h1><p>如果只是为了适配 rknn 框架，可以忽略此步骤，使用官方的模型部署，<a href="https://github.com/ultralytics/yolov5/releases/download/v6.0/yolov5s.pt">官方模型链接</a></p><h2 id="数据集标注"><a href="#数据集标注" class="headerlink" title="数据集标注"></a>数据集标注</h2><p>一般使用 labelImg 工具进行标注，<a href="https://github.com/heartexlabs/labelImg">github 仓库</a></p><h2 id="数据集整理"><a href="#数据集整理" class="headerlink" title="数据集整理"></a>数据集整理</h2><p>将数据集整理为如下格式，在 yolov5 根目录下新建 myData 文件夹，并做如下处理：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">├─ yolov5根目录</span><br><span class="line">│    ├─ xxxxxx</span><br><span class="line">│    ├─ xxxxxx</span><br><span class="line">······</span><br><span class="line">│    ├─ myData</span><br><span class="line">│    │    ├─ (你的数据集名称)</span><br><span class="line">│    │    |    ├─ data.yaml</span><br><span class="line">│    │    │    ├─ train</span><br><span class="line">│    │    │    |    ├─ images</span><br><span class="line">│    │    │    |    └─ labels</span><br><span class="line">│    │    |    ├─ valid</span><br><span class="line">│    │    │    |    ├─ images</span><br><span class="line">│    │    │    |    └─ labels</span><br><span class="line">│    │    ├─ (你的数据集2)</span><br><span class="line">│    │    ├─ (你的数据集3)</span><br><span class="line">│    │    ├─ (xxxxxxxxxx)</span><br><span class="line">······</span><br></pre></td></tr></table></figure><p>将标注好的数据集按比例分别放入 train 和 valid 中的 images、labels 中，同时每份数据集的 data.yaml 写入如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nc: (你的数据集类别个数)</span><br><span class="line">names: [&#x27;(你的类别名称1)&#x27;, &#x27;(你的类别名称2)&#x27;, ......]</span><br><span class="line">train: myData/(你的数据集名称)/train/images</span><br><span class="line">val：myData/(你的数据集名称)/valid/images</span><br></pre></td></tr></table></figure><p>最后，在 yolov5 根目录/models/yolov5s.yaml 文件中，将 nc 更改为你的数据集类别个数，比如，你的数据集有 2 个类别，分别检测人和车，那么将 nc 改为 2</p><h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><p>将 yolov5s.pt 模型文件放在 yolov5 根目录下，输入以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py --data myData/(你的数据集名称)/data.yaml --cfg yolov5s.yaml --weights yolov5s.pt</span><br></pre></td></tr></table></figure><h1 id="模型导出"><a href="#模型导出" class="headerlink" title="模型导出"></a>模型导出</h1><p>输入以下指令，可以得到 onnx 模型文件，以及模型对应的 anchor，这里保留 anchor 文件，在后处理部分会用到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python export.py --weights (训练得到的模型) --include onnx --rknpu rk3588</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 香橙派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 香橙派 </tag>
            
            <tag> rk3588 </tag>
            
            <tag> yolov5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Termux】第2期：通过 ssh 连接手机 Termux 服务器</title>
      <link href="/2022/12/28/Termux-2/"/>
      <url>/2022/12/28/Termux-2/</url>
      
        <content type="html"><![CDATA[<h1 id="上期回顾"><a href="#上期回顾" class="headerlink" title="上期回顾"></a>上期回顾</h1><p>在上一期中，在 Termux 软件中通过 proot 容器安装了 Ubuntu 22.04 系统。这个是完整的 Linux 系统，可以像操作远程服务器一样对容器进行操作。但由于是手机软件模拟的容器，在开启一些服务的时候并不能像一般的 Linux 系统一样操作，需要一些特殊的方式。本期主要讲述开启 ssh 服务，可以通过电脑端使用 VS Code 对手机服务器进行操作。</p><h1 id="进入-Termux-proot-容器"><a href="#进入-Termux-proot-容器" class="headerlink" title="进入 Termux proot 容器"></a>进入 Termux proot 容器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debian</span><br></pre></td></tr></table></figure><img src="pic2.jpg" width='400px'><h1 id="通过-apt-方式安装-openssh-server"><a href="#通过-apt-方式安装-openssh-server" class="headerlink" title="通过 apt 方式安装 openssh-server"></a>通过 apt 方式安装 openssh-server</h1><p>执行以下指令，安装 openssh-server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install openssh-server</span><br></pre></td></tr></table></figure><img src="pic3.jpg" width='400px'>安装完成后显示如下：<img src="pic4.jpg" width='400px'><h1 id="修改-openssh-默认启动端口"><a href="#修改-openssh-默认启动端口" class="headerlink" title="修改 openssh 默认启动端口"></a>修改 openssh 默认启动端口</h1><p>由于通过 proot 容器的方式安装系统，在这种方式下 Android 系统会对软件做出限制，使得软件无法启用 1024 以下的端口号。openssh 默认端口号为 22，需要将端口号更改为 1024 以上的端口，端口号可以随意指定，这里我们将端口号改为 8022 端口。</p><h2 id="进入-openssh-server-配置文件夹"><a href="#进入-openssh-server-配置文件夹" class="headerlink" title="进入 openssh-server 配置文件夹"></a>进入 openssh-server 配置文件夹</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/ssh</span><br></pre></td></tr></table></figure><h2 id="通过-vim-编辑器修改配置"><a href="#通过-vim-编辑器修改配置" class="headerlink" title="通过 vim 编辑器修改配置"></a>通过 vim 编辑器修改配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim sshd_config</span><br></pre></td></tr></table></figure><img src="pic5.jpg" width='400px'><ol><li>进入编辑器后，输入 i 进入编辑模式</li><li>找到 Port ，删除前面的 # ，将22修改为8022</li><li>按 ↓ ，找到 PermitRootLogin ，删除前面的 #，将后面的内容修改为 yes</li><li>修改完成后，按 Esc 退出编辑模式</li><li>输入 :wq ,回车保存退出</li></ol>如图所示，进入编辑器后可以看到如下界面：<img src="pic6.jpg" width='400px'>需要修改 Port 和 PermitRootLogin 两个属性<img src="pic7.jpg" width='400px'><img src="pic8.jpg" width='400px'><h1 id="开启-ssh-服务"><a href="#开启-ssh-服务" class="headerlink" title="开启 ssh 服务"></a>开启 ssh 服务</h1><p>配置完成后，执行以下指令，开启 ssh 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh start</span><br></pre></td></tr></table></figure><p>执行以下指令，检查 ssh 状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh status</span><br></pre></td></tr></table></figure><p>若显示 sshd is running，则启动成功，如图所示：<br><img src="pic9.jpg" width='400px'></p><h1 id="开机自动启动-ssh-服务"><a href="#开机自动启动-ssh-服务" class="headerlink" title="开机自动启动 ssh 服务"></a>开机自动启动 ssh 服务</h1><p>对于 tmoe 工具，可以通过修改配置文件实现启动容器的同时自动开启服务<br>执行如下指令，进入配置文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/etc/tmoe-linux/environment</span><br></pre></td></tr></table></figure><p>编辑 entrypoint 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim entrypoint</span><br></pre></td></tr></table></figure><p>写入如下指令，编辑方式同上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 开启 ssh 服务</span><br><span class="line">service ssh start</span><br></pre></td></tr></table></figure><p>保存退出，方式同上<br>如图所示：<br><img src="pic10.jpg" width='400px'><br><img src="pic11.jpg" width='400px'></p><h1 id="验证-ssh-服务是否自启"><a href="#验证-ssh-服务是否自启" class="headerlink" title="验证 ssh 服务是否自启"></a>验证 ssh 服务是否自启</h1><p>输入如下指令，退出容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">logout</span></span><br></pre></td></tr></table></figure><p>输入如下指令，重新启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debian</span><br></pre></td></tr></table></figure><p>如果看到以下语句，则自启成功<br><img src="pic12.jpg" width='400px'></p>]]></content>
      
      
      <categories>
          
          <category> Termux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手机搭建服务器 </tag>
            
            <tag> Termux </tag>
            
            <tag> 开启 SSH 服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Termux】第1期：在手机中安装Linux系统</title>
      <link href="/2022/12/26/Termux-1/"/>
      <url>/2022/12/26/Termux-1/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-Termux"><a href="#什么是-Termux" class="headerlink" title="什么是 Termux"></a>什么是 Termux</h1><p>Termux 是一个 <strong>Android 终端仿真应用程序</strong>，用于在 <strong>Android 手机上搭建 Linux 环境</strong>， <strong>不需要 root 权限</strong> Termux 就可以正常运行。Termux 可以实现 Linux 下的许多基本操作，可以使用 Termux 安装 python，并实现 python 编程。最重要的是，可以在 Termux 中安装容器，实现<strong>完整的 Linux 系统</strong>。</p><h1 id="Termux-安装"><a href="#Termux-安装" class="headerlink" title="Termux 安装"></a>Termux 安装</h1><h2 id="Termux-下载"><a href="#Termux-下载" class="headerlink" title="Termux 下载"></a>Termux 下载</h2><p>Termux 可以在<a href="https://github.com/termux/termux-app/releases/download/v0.118.0/termux-app_v0.118.0+github-debug_universal.apk">github 中下载</a><br>如果无法访问 github，也可以通过<a href="https://mirrors.tuna.tsinghua.edu.cn/fdroid/repo/com.termux_118.apk">清华镜像源下载</a></p><h1 id="开始部署-Linux-环境"><a href="#开始部署-Linux-环境" class="headerlink" title="开始部署 Linux 环境"></a>开始部署 Linux 环境</h1><p>对于新手而言，推荐使用别人开发好的脚本。这里推荐使用 <strong>天萌 tmoe</strong> 脚本，里面集成了很多的功能，对新手比较友好。缺点是安装好的环境有一些冗余，大家可以在用熟后自己部署 Linux 环境。<br>打开 Termux ，界面如下：<br><img src="pic1.jpg"><br>如果可以访问 github，使用以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LO --compressed https://raw.githubusercontent.com/2moe/tmoe/2/2.awk; awk -f 2.awk</span><br></pre></td></tr></table></figure><p>如果无法访问 github，使用以下指令，从 gitee 仓库中克隆：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LO https://gitee.com/mo2/linux/raw/2/2.awk; awk -f 2.awk</span><br></pre></td></tr></table></figure><p>在执行指令后，会自动下载脚本，选择通过 gitee 下载<br><img src="pic2.jpg"></p><p>可以看到选择语言界面，语言选择中文<br><img src="pic3.jpg"></p><p>这里选择 proot 容器,选择后会自动安装相关依赖。安装过程中会提示换源，按回车选择北外源<br><img src="pic4.jpg" width='400px'></p><p>执行过程中会遇到这样的选项，直接按回车即可<br><img src="pic5.jpg" width='400px'></p><p>继续选择 proot 容器<br><img src="pic6.jpg" width='400px'></p><p>终端配色看个人喜好，这里选择了 neon<br><img src="pic7.jpg" width='400px'></p><p>字体选择 Inconsolata-go(粗)<br><img src="pic8.jpg" width='400px'></p><p>修改小键选择 Yes<br><img src="pic9.jpg" width='400px'></p><p>DNS 选择第一个即可<br><img src="pic10.jpg" width='400px'></p><p>一言看个人喜好，这里没有开启一言功能<br><img src="pic11.jpg" width='400px'></p><p>时区根据个人所在地选择<br><img src="pic12.jpg" width='400px'></p><p>挂载目录推荐选择挂载部分目录，这里只挂载了手机中 Download 目录，即 Termux 只可以读取手机中 Download 目录下的内容<br><img src="pic13.jpg" width='400px'></p><p>目录挂载的位置，这里挂载到了/home 中<br><img src="pic14.jpg" width='400px'></p><p>选择 proot 容器中安装的系统，这里安装 Ubuntu 22.04 系统<br><img src="pic15.jpg" width='400px'><br><img src="pic16.jpg" width='400px'><br><img src="pic17.jpg" width='400px'></p><p>选择启动即可<br><img src="pic18.jpg" width='400px'></p><p>接下来需要等待一段时间，安装完成后，出现如下界面，选择 <strong>否</strong><br><img src="pic19.jpg" width='400px'></p><p>这里选择不配置 zsh<br><img src="pic20.jpg" width='400px'></p><p>选择删除 zsh.sh<br><img src="pic21.jpg" width='400px'></p><p>选择不启动 tmoe tools<br><img src="pic22.jpg" width='400px'></p><p>配置完成后，即可进入 Ubuntu 22.04 系统<br><img src="pic23.jpg" width='400px'></p><h1 id="在-proot-容器中安装-tmoe-tools"><a href="#在-proot-容器中安装-tmoe-tools" class="headerlink" title="在 proot 容器中安装 tmoe tools"></a>在 proot 容器中安装 tmoe tools</h1><p>先前已经在 Termux 中安装了 tmoe tools，这里在容器中同样安装 tmoe tools，方便后续对系统进行软件安装和配置<br>输入如下指令后，进行 tmoe tools 自动安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmoe</span><br></pre></td></tr></table></figure><p>安装完成后出现如下界面，选择退出即可<br><img src="pic24.jpg" width='400px'></p><h1 id="退出容器，返回-Termux"><a href="#退出容器，返回-Termux" class="headerlink" title="退出容器，返回 Termux"></a>退出容器，返回 Termux</h1><p>输入如下指令，直至出现 <strong>按回车键返回</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><img src="pic25.jpg" width='400px'><p>按下回车，按 ——&gt; 选择 cancel<br><img src="pic26.jpg" width='400px'><br><img src="pic27.jpg" width='400px'><br><img src="pic28.jpg" width='400px'><br><img src="pic29.jpg" width='400px'></p><p>当出现如下界面时，说明已经返回到了 Termux<br><img src="pic30.jpg" width='400px'><br>输入如下指令，清理屏幕</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear</span><br></pre></td></tr></table></figure><img src="pic31.jpg" width='400px'><p>至此，安装完成</p><h1 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h1><p>退出 Termux 后，想要重新进入容器，可以输入如下指令，进入容器（即刚刚安装的 Ubuntu 系统）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debian</span><br></pre></td></tr></table></figure><p>在进入容器后，即可按照正常的 Linux 系统进行使用</p><p>进入容器后，想要退出容器返回 Termux ，可以输入如下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">logout</span></span><br></pre></td></tr></table></figure><p>在容器中想要退出程序的时候，最好<strong>先退出容器再关闭 app</strong>，防止丢失数据</p>]]></content>
      
      
      <categories>
          
          <category> Termux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手机搭建服务器 </tag>
            
            <tag> Termux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
